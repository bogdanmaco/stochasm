version: '3.8'

services:
  app:
    build: .
    container_name: stochasm-solution
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - stochasm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: stochasm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - stochasm-network

  # Optional: Redis for caching
  redis:
    image: redis:alpine
    container_name: stochasm-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - stochasm-network
    command: redis-server --appendonly yes

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: stochasm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - stochasm-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: stochasm-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - stochasm-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  stochasm-network:
    driver: bridge
